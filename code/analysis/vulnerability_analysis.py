from collections import Counter, defaultdict

import igraph as ig
import numpy as np
import pandas as pd
from tqdm import tqdm


def vulnerabilities_per_community(graph, communities, vulns):
    vuln_communities = []
    community_vulns = defaultdict(list)
    for _, vuln in tqdm(
        vulns.iterrows(), desc="Enumerating vulnerabilities", total=len(vulns)
    ):
        try:
            vuln_id = graph.vs.find(name=vuln["package"]).index
            comm = communities.membership[vuln_id]
            vuln_communities.append(comm)
            community_vulns[comm].append(vuln["package"])
        except ValueError:
            # Package is not in the graph
            pass

    return Counter(vuln_communities), community_vulns


def vulnerabilities_reach(graph, vulns):
    graph.vs["vuln_count"] = [0 for _ in range(len(graph.vs))]
    vuln_metrics = {}
    pr = np.array(graph.pagerank())

    for _, vuln in tqdm(
        vulns.iterrows(), desc="Enumerating vulnerabilities", total=len(vulns)
    ):
        try:
            vuln_id = graph.vs.find(name=vuln["package"]).index
            in_compoennt = graph.subcomponent(vuln_id, mode="in")
            for node in in_compoennt:
                graph.vs[node]["vuln_count"] += 1
            vuln_metrics[vuln["package"]] = {
                "reach": len(in_compoennt),
                "downloads": np.sum(np.array(graph.vs["downloads"])[in_compoennt]),
                "pagerank": np.sum(pr[in_compoennt]),
            }
        except ValueError:
            # Package is not in the graph
            pass

    return vuln_metrics


def print_cve_by_metric(
    graph,
    vuln_data,
    top_n=10,
    metric="reach",
    print_str="{cve} reached {value} packages ({percent:.2f}%)",
):
    top_cves = sorted(
        [(vuln, metrics[metric]) for vuln, metrics in vuln_data.items()],
        key=lambda x: x[1],
        reverse=True,
    )[:top_n]

    for cve, value in top_cves:
        print(
            print_str.format(cve=cve, value=value, percent=value / len(graph.vs) * 100)
        )


graph = ig.Graph.Read_GraphML("../../networks/npm_lcc.graphml")
vulns = pd.read_csv("../vulnerability/npm_grouped.csv")

downloads = []
for v in graph.vs:
    try:
        downloads.append(int(v["downloads"]))
    except ValueError:
        downloads.append(0)
graph.vs["downloads"] = downloads

vuln_compoennts = vulnerabilities_reach(graph, vulns)

df = pd.DataFrame(vuln_compoennts).T
df.to_csv("../results/vulnerability_metrics_npm.csv")

print("Top CVEs by reach:")
print_cve_by_metric(graph, vuln_compoennts, top_n=10)
print()

print("Top CVEs by downloads:")
print_cve_by_metric(
    graph,
    vuln_compoennts,
    top_n=10,
    metric="downloads",
    print_str="{cve} could have reached {value} downloads",
)
print()

print("Top CVEs by pagerank:")
pr = np.array(graph.pagerank())
print_cve_by_metric(
    graph,
    vuln_compoennts,
    top_n=10,
    metric="pagerank",
    print_str="{cve} affected combined {value} pagerank",
)
print()
