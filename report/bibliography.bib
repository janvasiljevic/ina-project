@article{hafner2021robustness,
  title   = {Node package manager's dependency network robustness},
  author  = {Hafner, Andrej and Mur, An{\v{z}}e and Bernard, Jaka},
  journal = {arXiv preprint arXiv:2110.11695},
  year    = {2021}
}

@inproceedings{tsakpinis2024accessibility,
  title        = {Analyzing the Accessibility of GitHub Repositories for PyPI and NPM Libraries},
  author       = {Tsakpinis, Alexandros and Pretschner, Alexander},
  booktitle    = {28th International Conference on Evaluation and Assessment in Software Engineering (EASE 2024)},
  year         = {2024},
  organization = {ACM}
}

@article{jia2022vulnerability,
  title   = {Cargo Ecosystem Dependency-Vulnerability Knowledge Graph Construction and Vulnerability Propagation Study},
  author  = {Jia, Peiyang and Liu, Chengwei and Sun, Hongyu and Sun, Chengyi and Gu, Mianxue and Liu, Yang and Wu, Gaofei and Wang, He and Zhang, Yuqing},
  journal = {arXiv preprint arXiv:2210.07482},
  year    = {2022}
}

@article{decan2018evolution,
  title     = {An empirical comparison of dependency network evolution in seven software packaging ecosystems},
  author    = {Decan, Alexandre and Mens, Tom and Grosjean, Philippe},
  journal   = {Empirical Software Engineering},
  volume    = {23},
  number    = {3},
  pages     = {1--37},
  year      = {2018},
  publisher = {Springer}
}

@inproceedings{decan2018vulnerabilities,
  title        = {On the impact of security vulnerabilities in the npm package dependency network},
  author       = {Decan, Alexandre and Mens, Tom and Constantinou, Eleni},
  booktitle    = {Proceedings of the 15th International Conference on Mining Software Repositories},
  pages        = {181--191},
  year         = {2018},
  organization = {ACM}
}

@inproceedings{korkmazrpackages,
  author    = {Korkmaz, Gizem and Kelling, Claire and Robbins, Carol and Keller, Sallie A.},
  booktitle = {2018 IEEE/ACM International Conference on Advances in Social Networks Analysis and Mining (ASONAM)},
  title     = {Modeling the Impact of R Packages Using Dependency and Contributor Networks},
  year      = {2018},
  volume    = {},
  number    = {},
  pages     = {511-514},
  keywords  = {Data models;Open source software;Collaboration;Software measurement;Encoding},
  doi       = {10.1109/ASONAM.2018.8508255}
}

@article{HANIF2021103009,
  title    = {The rise of software vulnerability: Taxonomy of software vulnerabilities detection and machine learning approaches},
  journal  = {Journal of Network and Computer Applications},
  volume   = {179},
  pages    = {103009},
  year     = {2021},
  issn     = {1084-8045},
  doi      = {https://doi.org/10.1016/j.jnca.2021.103009},
  url      = {https://www.sciencedirect.com/science/article/pii/S1084804521000369},
  author   = {Hazim Hanif and Mohd Hairul Nizam {Md Nasir} and Mohd Faizal {Ab Razak} and Ahmad Firdaus and Nor Badrul Anuar},
  keywords = {Software vulnerability detection, Software security, Computer security, Machine learning, Deep learning},
  abstract = {The detection of software vulnerability requires critical attention during the development phase to make it secure and less vulnerable. Vulnerable software always invites hackers to perform malicious activities and disrupt the operation of the software, which leads to millions in financial losses to software companies. In order to reduce the losses, there are many reliable and effective vulnerability detection systems introduced by security communities aiming to detect the software vulnerabilities as early as in the development or testing phases. To summarise the software vulnerability detection system, existing surveys discussed the conventional and data mining approaches. These approaches are widely used and mostly consist of traditional detection techniques. However, they lack discussion on the newly trending machine learning approaches, such as supervised learning and deep learning techniques. Furthermore, existing studies fail to discuss the growing research interest in the software vulnerability detection community throughout the years. With more discussion on this, we can predict and focus on what are the research problems in software vulnerability detection that need to be urgently addressed. Aiming to reduce these gaps, this paper presents the research interests’ taxonomy in software vulnerability detection, such as methods, detection, features, code and dataset. The research interest categories exhibit current trends in software vulnerability detection. The analysis shows that there is considerable interest in addressing methods and detection problems, while only a few are interested in code and dataset problems. This indicates that there is still much work to be done in terms of code and dataset problems in the future. Furthermore, this paper extends the machine learning approaches taxonomy, which is used to detect the software vulnerabilities, like supervised learning, semi-supervised learning, ensemble learning and deep learning. Based on the analysis, supervised learning and deep learning approaches are trending in the software vulnerability detection community as these techniques are able to detect vulnerabilities such as buffer overflow, SQL injection and cross-site scripting effectively with a significant detection performance, up to 95% of F1 score. Finally, this paper concludes with several discussions on potential future work in software vulnerability detection in terms of datasets, multi-vulnerabilities detection, transfer learning and real-world applications.}
}

@inproceedings{hejderup2018,
  author    = {Hejderup, Joseph and van Deursen, Arie and Gousios, Georgios},
  title     = {Software ecosystem call graph for dependency management},
  year      = {2018},
  isbn      = {9781450356626},
  publisher = {Association for Computing Machinery},
  address   = {New York, NY, USA},
  url       = {https://doi.org/10.1145/3183399.3183417},
  doi       = {10.1145/3183399.3183417},
  abstract  = {A popular form of software reuse is the use of open source software libraries hosted on centralized code repositories, such as Maven or npm. Developers only need to declare dependencies to external libraries, and automated tools make them available to the workspace of the project. Recent incidents, such as the Equifax data breach and the leftpad package removal, demonstrate the difficulty in assessing the severity, impact and spread of bugs in dependency networks. While dependency checkers are being adapted as a counter measure, they only provide indicative information. To remedy this situation, we propose a fine-grained dependency network that goes beyond packages and into call graphs. The result is a versioned ecosystem-level call graph. In this paper, we outline the process to construct the proposed graph and present a preliminary evaluation of a security issue from a core package to an affected client application.},
  booktitle = {Proceedings of the 40th International Conference on Software Engineering: New Ideas and Emerging Results},
  pages     = {101–104},
  numpages  = {4},
  location  = {Gothenburg, Sweden},
  series    = {ICSE-NIER '18}
}

@inproceedings{shahzad2012,
  author    = {Shahzad, Muhammad and Shafiq, Muhammad Zubair and Liu, Alex X.},
  booktitle = {2012 34th International Conference on Software Engineering (ICSE)},
  title     = {A large scale exploratory analysis of software vulnerability life cycles},
  year      = {2012},
  volume    = {},
  number    = {},
  pages     = {771-781},
  keywords  = {Computer hacking;Complexity theory;Aggregates;Measurement;Open source software;vulnerability;disclosure;patch;exploit;NVD;OSVDB},
  doi       = {10.1109/ICSE.2012.6227141}
}

@inproceedings{ruohonen2021,
  author    = {Ruohonen, Jukka and Hjerppe, Kalle and Rindell, Kalle},
  booktitle = {2021 18th International Conference on Privacy, Security and Trust (PST)},
  title     = {A Large-Scale Security-Oriented Static Analysis of Python Packages in PyPI},
  year      = {2021},
  volume    = {},
  number    = {},
  pages     = {1-10},
  keywords  = {Measurement;Privacy;Codes;Ecosystems;Static analysis;Software;Security;Bug;defect;issue;smell;vulnerability;weakness;repository;ecosystem;static analysis;linting;Bandit;PyPI},
  doi       = {10.1109/PST52912.2021.9647791}
}

@article{hejderup2022prazi,
  title     = {Pr{\"a}zi: from package-based to call-based dependency networks},
  author    = {Hejderup, Jason and Beller, Moritz and Triantafyllou, Konstantinos and others},
  journal   = {Empirical Software Engineering},
  volume    = {27},
  number    = {102},
  pages     = {1--34},
  year      = {2022},
  publisher = {Springer},
  doi       = {10.1007/s10664-021-10071-9}
}



@inproceedings{npmdata,
  author    = {Pinckney, Donald and Cassano, Federico and Guha, Arjun and Bell, Jonathan},
  title     = {A Large Scale Analysis of Semantic Versioning in NPM},
  series    = {MSR},
  booktitle = {Proceedings of the 20th International Conference on Mining Software Repositories},
  year      = {2023},
  note      = {Acceptance rate: 36\%.},
  url       = {https://www.jonbell.net/preprint/msr23-npm.pdf},
  artifact  = {https://doi.org/10.5281/zenodo.7552551}
}
@misc{NPM,
  title   = {Node package manager},
  url     = {https://www.npmjs.com/},
  year    = 2024,
  urldate = {2024-05-31}
}

@misc{crates,
  title   = {Crates.io},
  url     = {https://crates.io/},
  year    = 2024,
  urldate = {2024-05-31}
}

@misc{pypi,
  title   = {Python Package Index},
  url     = {https://pypi.org/},
  year    = 2024,
  urldate = {2024-05-31}
}

